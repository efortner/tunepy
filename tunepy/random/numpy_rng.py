from tunepy.interfaces import AbstractRandomNumberGenerator
import numpy as np


class NumpyRNG(AbstractRandomNumberGenerator):
    """
    A tunepy wrapper for the number random number generator.
    """

    def __init__(self, seed=None, integer_type='int8'):
        """
        Creates a new numpy-based random number generator.
        :param seed: Seed that will be passed into numpy (this is global to numpy).
        :param integer_type: The numpy type of integers generated by this random number generator.
        """
        if seed is not None:
            np.random.seed(seed)
        self._integer_type = integer_type

    def random(self):
        """
        Returns a random number between 0 and 1.
        :return: A single random number between 0 and 1.
        """
        return np.random.random()

    def random_int_array(self, minimum, maximum, shape):
        """
        Builds an array-like structure of random integers.
        :param minimum: Minimum integer value (inclusive).
        :param maximum: Maximum integer value (exclusive).
        :param shape: Tuple representing the shape of the output.
        :return: Array-like collection of integers.
        """
        return np.random.randint(minimum, maximum, size=shape, dtype=self._integer_type)
